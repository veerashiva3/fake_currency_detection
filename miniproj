import cv2
import pytesseract
from google.colab.patches import cv2_imshow

def detect_license_plate(image_path):
    # Load the image
    image = cv2.imread(image_path)

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Otsu thresholding (binary inverse)
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # Perform edge detection
    edges = cv2.Canny(thresh, 30, 150)

    # Find contours in the edged image
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Filter contours based on area to get potential license plate regions
    potential_plates = []
    for contour in contours:
        area = cv2.contourArea(contour)
        if 1000 < area < 50000:
            potential_plates.append(contour)

    # Sort potential plates in descending order of area
    potential_plates = sorted(potential_plates, key=cv2.contourArea, reverse=True)[:5]

    # Iterate over potential plates and find the license plate with highest accuracy
    for plate in potential_plates:
        x, y, w, h = cv2.boundingRect(plate)
        plate_image = gray[y:y + h, x:x + w]

        # Apply OCR (Optical Character Recognition) to read the license plate number
        license_number = pytesseract.image_to_string(plate_image, config='--psm 7')
        license_number = license_number.replace('\n', '').replace('\x0c', '').strip()

        if license_number:
            print("License Plate Number:", license_number)

            # Draw a rectangle around the license plate
            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # Display the image with the license plate
            cv2_imshow(image)
            cv2.waitKey(0)
            cv2.destroyAllWindows()
            return

    print("No license plate detected.")

# Provide the path to your image file
image_path = '/content/mini22.jpg'

# Call the function to detect and read the license plate
detect_license_plate(image_path)
